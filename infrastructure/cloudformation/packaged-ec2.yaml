AWSTemplateFormatVersion: '2010-09-09'
Description: Main template for Agent Platform
Parameters:
  AWSRegion:
    Type: String
    Default: us-west-1
  KeycloakClientSecret:
    Type: String
    Default: ''
  KeycloakAdminPassword:
    Type: String
    Default: ''
  GitHubUsername:
    Type: String
    Default: guanmasons
  GitHubRepo:
    Type: String
    Default: agent-platform
Resources:
  DynamoDBTables:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateBody:
        Fn::Sub: "AWSTemplateFormatVersion: '2010-09-09'\nDescription: DynamoDB tables\
          \ for AI Agent Platform\nResources:\n  UserTable:\n    Type: AWS::DynamoDB::Table\n\
          \    Properties:\n      TableName: !Sub '${AWS::StackName}-UserTable'\n\
          \      AttributeDefinitions:\n        - AttributeName: userId\n        \
          \  AttributeType: S\n      KeySchema:\n        - AttributeName: userId\n\
          \          KeyType: HASH\n      ProvisionedThroughput:\n        ReadCapacityUnits:\
          \ 1\n        WriteCapacityUnits: 1\n  AgentTable:\n    Type: AWS::DynamoDB::Table\n\
          \    Properties:\n      TableName: !Sub '${AWS::StackName}-AgentTable'\n\
          \      AttributeDefinitions:\n        - AttributeName: agentId\n       \
          \   AttributeType: S\n      KeySchema:\n        - AttributeName: agentId\n\
          \          KeyType: HASH\n      ProvisionedThroughput:\n        ReadCapacityUnits:\
          \ 1\n        WriteCapacityUnits: 1\n  LoginTable:\n    Type: AWS::DynamoDB::Table\n\
          \    Properties:\n      TableName: !Sub '${AWS::StackName}-LoginTable'\n\
          \      AttributeDefinitions:\n        - AttributeName: userId\n        \
          \  AttributeType: S\n      KeySchema:\n        - AttributeName: userId\n\
          \          KeyType: HASH\n      ProvisionedThroughput:\n        ReadCapacityUnits:\
          \ 1\n        WriteCapacityUnits: 1\nOutputs:\n  DynamoDBTableName:\n   \
          \ Description: The name of the User DynamoDB table\n    Value: !Ref UserTable\n\
          \  DynamoDBTableArn:\n    Description: The ARN of the User DynamoDB table\n\
          \    Value: !GetAtt UserTable.Arn\n  AgentDynamoDBTableName:\n    Description:\
          \ The name of the Agent DynamoDB table\n    Value: !Ref AgentTable\n  AgentDynamoDBTableArn:\n\
          \    Description: The ARN of the Agent DynamoDB table\n    Value: !GetAtt\
          \ AgentTable.Arn\n  LoginDynamoDBTableName:\n    Description: The name of\
          \ the Login DynamoDB table\n    Value: !Ref LoginTable\n  LoginDynamoDBTableArn:\n\
          \    Description: The ARN of the Login DynamoDB table\n    Value: !GetAtt\
          \ LoginTable.Arn\n"
  EC2Instance:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateBody:
        Fn::Sub: "AWSTemplateFormatVersion: '2010-09-09'\nDescription: EC2 instance\
          \ for Agent Platform\nParameters:\n  DynamoDBTableArns:\n    Type: String\n\
          \  KeycloakClientSecret:\n    Type: String\n    NoEcho: true\n  KeycloakAdminPassword:\n\
          \    Type: String\n    NoEcho: true\n  GitHubUsername:\n    Type: String\n\
          \  GitHubRepo:\n    Type: String\n\nResources:\n  EC2Instance:\n    Type:\
          \ AWS::EC2::Instance\n    Properties:\n      ImageId: ami-0c55b31ad2299a701\n\
          \      InstanceType: t2.micro\n      KeyName: agent-platform-key-pair\n\
          \      SecurityGroupIds:\n        - !Ref EC2SecurityGroup\n      IamInstanceProfile:\
          \ !Ref EC2InstanceProfile\n      UserData:\n        Fn::Base64: !Sub |\n\
          \          #!/bin/bash\n          yum update -y\n          yum install -y\
          \ docker git\n          systemctl start docker\n          systemctl enable\
          \ docker\n          usermod -a -G docker ec2-user\n          curl -L \"\
          https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname\
          \ -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\n          chmod +x\
          \ /usr/local/bin/docker-compose\n          curl \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\"\
          \ -o \"awscliv2.zip\"\n          unzip awscliv2.zip\n          ./aws/install\n\
          \n          mkdir -p /opt/agent-platform\n          touch /opt/agent-platform/.env\n\
          \n          printf \"KEYCLOAK_CLIENT_SECRET=${KeycloakClientSecret}\\nKEYCLOAK_ADMIN_PASSWORD=${KeycloakAdminPassword}\\\
          n\" >> /opt/agent-platform/.env\n\n          git clone https://github.com/${GitHubUsername}/${GitHubRepo}.git\
          \ /opt/agent-platform\n          chown -R ec2-user:ec2-user /opt/agent-platform\n\
          \n          cd /opt/agent-platform\n          docker-compose -f infrastructure/docker/docker-compose.prod.yml\
          \ up -d --build\n\n  EC2SecurityGroup:\n    Type: AWS::EC2::SecurityGroup\n\
          \    Properties:\n      GroupName: !Sub ${AWS::StackName}-agent-platform-sg\n\
          \      GroupDescription: Allow SSH, HTTP, and HTTPS\n      SecurityGroupIngress:\n\
          \        - IpProtocol: tcp\n          FromPort: 22\n          ToPort: 22\n\
          \          CidrIp: 0.0.0.0/0\n        - IpProtocol: tcp\n          FromPort:\
          \ 80\n          ToPort: 80\n          CidrIp: 0.0.0.0/0\n        - IpProtocol:\
          \ tcp\n          FromPort: 443\n          ToPort: 443\n          CidrIp:\
          \ 0.0.0.0/0\n        - IpProtocol: tcp\n          FromPort: 8080\n     \
          \     ToPort: 8080\n          CidrIp: 0.0.0.0/0\n        - IpProtocol: tcp\n\
          \          FromPort: 3000\n          ToPort: 3000\n          CidrIp: 0.0.0.0/0\n\
          \        - IpProtocol: tcp\n          FromPort: 3001\n          ToPort:\
          \ 3001\n          CidrIp: 0.0.0.0/0\n        - IpProtocol: tcp\n       \
          \   FromPort: 3002\n          ToPort: 3002\n          CidrIp: 0.0.0.0/0\n\
          \n  EC2InstanceProfile:\n    Type: AWS::IAM::InstanceProfile\n    Properties:\n\
          \      Path: /\n      Roles:\n        - !Ref EC2InstanceRole\n\n  EC2InstanceRole:\n\
          \    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n\
          \        Version: '2012-10-17'\n        Statement:\n          - Effect:\
          \ Allow\n            Principal:\n              Service: ec2.amazonaws.com\n\
          \            Action: sts:AssumeRole\n      Policies:\n        - PolicyName:\
          \ EC2DynamoDBPolicy\n          PolicyDocument:\n            Version: '2012-10-17'\n\
          \            Statement:\n              - Effect: Allow\n               \
          \ Action:\n                  - dynamodb:*\n                Resource: !Split\
          \ [\",\", !Ref DynamoDBTableArns]\n\nOutputs:\n  EC2InstanceId:\n    Description:\
          \ The ID of the EC2 instance\n    Value: !Ref EC2Instance\n  EC2InstancePublicDNS:\n\
          \    Description: Public DNS of the EC2 instance\n    Value: !GetAtt EC2Instance.PublicDnsName\n\
          \  EC2InstancePublicIP:\n    Description: Public IP of the EC2 instance\n\
          \    Value: !GetAtt EC2Instance.PublicIp\n"
      Parameters:
        DynamoDBTableArns:
          Fn::Join:
          - ','
          - - Fn::GetAtt:
              - DynamoDBTables
              - Outputs.DynamoDBTableArn
            - Fn::GetAtt:
              - DynamoDBTables
              - Outputs.AgentDynamoDBTableArn
            - Fn::GetAtt:
              - DynamoDBTables
              - Outputs.LoginDynamoDBTableArn
        KeycloakClientSecret:
          Ref: KeycloakClientSecret
        KeycloakAdminPassword:
          Ref: KeycloakAdminPassword
        GitHubUsername:
          Ref: GitHubUsername
        GitHubRepo:
          Ref: GitHubRepo
Outputs:
  EC2InstanceId:
    Description: The ID of the EC2 instance
    Value:
      Fn::GetAtt:
      - EC2Instance
      - Outputs.EC2InstanceId
  DynamoDBTableName:
    Description: The name of the DynamoDB table
    Value:
      Fn::GetAtt:
      - DynamoDBTables
      - Outputs.DynamoDBTableName
  EC2InstancePublicDNS:
    Description: Public DNS of the EC2 instance
    Value:
      Fn::GetAtt:
      - EC2Instance
      - Outputs.EC2InstancePublicDNS
  EC2InstancePublicIP:
    Description: Public IP of the EC2 instance
    Value:
      Fn::GetAtt:
      - EC2Instance
      - Outputs.EC2InstancePublicIP
