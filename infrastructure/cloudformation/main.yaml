AWSTemplateFormatVersion: '2010-09-09'
Description: Agent Platform Infrastructure

Resources:
  # DynamoDB Tables
  UserTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${StackName}-UserTable'
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  AgentTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${StackName}-AgentTable'
      AttributeDefinitions:
        - AttributeName: agentId
          AttributeType: S
      KeySchema:
        - AttributeName: agentId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  LoginTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${StackName}-LoginTable'
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Agent Platform
      VpcId: !Ref VPC
      SecurityGroupIngress:
        # Public access ports
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: Allow HTTP from anywhere
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: Allow HTTPS from anywhere
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref AllowedSSHIP
          Description: Allow SSH from specific IP
        # Internal service ports
        - IpProtocol: tcp
          FromPort: 3001
          ToPort: 3001
          CidrIp: 10.0.0.0/16
          Description: Datastore API port
        - IpProtocol: tcp
          FromPort: 3002
          ToPort: 3002
          CidrIp: 10.0.0.0/16
          Description: Control API port
        - IpProtocol: tcp
          FromPort: 3003
          ToPort: 3003
          CidrIp: 10.0.0.0/16
          Description: Crawler/Developer API port

  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource:
                  - !GetAtt UserTable.Arn
                  - !GetAtt AgentTable.Arn
                  - !GetAtt LoginTable.Arn

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref EC2InstanceRole

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0aa117785d1c1bfe5
      InstanceType: !Ref EC2InstanceType
      KeyName: !Ref EC2KeyPairName
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      IamInstanceProfile: !Ref EC2InstanceProfile
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          
          # Install required packages
          yum update -y
          yum install -y docker git unzip

          # Start and enable Docker
          systemctl start docker
          systemctl enable docker
          usermod -a -G docker ec2-user

          # Install AWS CLI v2
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          ./aws/install
          rm awscliv2.zip

          # Install Docker Compose
          curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose

          # Clean up and clone repository
          rm -rf /opt/agent-platform
          git clone https://github.com/${GitHubUsername}/${GitHubRepo}.git /opt/agent-platform

          # Create environment variable setup script
          cat << EOF > /opt/agent-platform/setup-env.sh
          #!/bin/bash
          # AWS Configuration
          export AWS_REGION=${AWSRegion}
          export AWS_ACCESS_KEY_ID=${AwsAccessKeyId}
          export AWS_SECRET_ACCESS_KEY=${AwsSecretAccessKey}
          
          # DynamoDB Tables
          export DYNAMODB_USER_TABLE=${StackName}-UserTable
          export DYNAMODB_AGENT_TABLE=${StackName}-AgentTable
          export DYNAMODB_USER_LOGIN_TABLE=${StackName}-LoginTable
          
          # Service Ports
          export DATASTORE_API_PORT=${DatastoreApiPort}
          export CONTROL_API_PORT=${ControlApiPort}
          export SEARCH_API_PORT=${SearchApiPort}
          export WEB_SERVICE_PORT=${WebServicePort}
          
          # Keycloak Configuration
          export KEYCLOAK_REALM=${KeycloakRealm}
          export KEYCLOAK_CLIENT_ID=${KeycloakClientId}
          export KEYCLOAK_CLIENT_SECRET=${KeycloakClientSecret}
          export KEYCLOAK_ADMIN_USER=${KeycloakAdminUser}
          export KEYCLOAK_ADMIN_PASSWORD=${KeycloakAdminPassword}
          export KEYCLOAK_WEB_CLIENT_ID=${KeycloakWebClientId}
          
          # Get EC2 public IP using instance metadata
          EC2_PUBLIC_IP=$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)
          export EC2_PUBLIC_IP
          
          # Service URLs
          export KEYCLOAK_SERVER_URL="http://keycloak:8080"
          export DATASTORE_API_URL="http://datastore-api:${DatastoreApiPort}"
          export CONTROL_API_URL="http://\$EC2_PUBLIC_IP:${ControlApiPort}"
          export KEYCLOAK_URL="http://\$EC2_PUBLIC_IP:8080"
          EOF

          chmod +x /opt/agent-platform/setup-env.sh

          # Create the run-docker script
          cat << 'EOF' > /opt/agent-platform/run-docker.sh
          #!/bin/bash
          set -e

          # Source the environment variables
          source /opt/agent-platform/setup-env.sh

          # Export all variables to environment
          export $(cat /opt/agent-platform/setup-env.sh | grep -v '^#' | grep '=' | cut -d= -f1)

          # Run docker-compose
          cd /opt/agent-platform
          docker-compose -f infrastructure/docker/docker-compose.prod.yml up -d --build
          EOF

          chmod +x /opt/agent-platform/run-docker.sh

          # Add environment setup to ec2-user's .bashrc
          echo 'source /opt/agent-platform/setup-env.sh' >> /home/ec2-user/.bashrc
          echo 'alias platform-docker="cd /opt/agent-platform && docker-compose -f infrastructure/docker/docker-compose.prod.yml"' >> /home/ec2-user/.bashrc

          # Set proper permissions
          chown -R ec2-user:ec2-user /opt/agent-platform
          chmod 600 /opt/agent-platform/setup-env.sh

          # Start Docker services
          cd /opt/agent-platform
          ./run-docker.sh

  # VPC Configuration
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: AgentPlatformVPC

  # Public Subnet for external access (web-service)
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: AgentPlatformPublicSubnet

  # Private Subnet for internal services
  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: AgentPlatformPrivateSubnet

  # Internet Gateway for public subnet
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: AgentPlatformIGW

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Route table for public subnet
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: AgentPlatformPublicRT

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  # Route table for private subnet
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: AgentPlatformPrivateRT

  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable

Parameters:
  StackName:
    Type: String
    Description: Name of the CloudFormation stack
  AWSRegion:
    Type: String
    Default: us-west-1
    Description: AWS Region for resources
  EC2InstanceType:
    Type: String
    Default: t2.micro
    Description: EC2 instance type
  EC2KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair
  KeycloakRealm:
    Type: String
    Default: agent-platform-realm
    Description: Keycloak realm name
  KeycloakClientId:
    Type: String
    Default: agent-platform-client
    Description: Keycloak client ID
  KeycloakClientSecret:
    Type: String
    NoEcho: true
    Description: Keycloak client secret
  KeycloakAdminUser:
    Type: String
    Default: admin
    Description: Keycloak admin username
  KeycloakAdminPassword:
    Type: String
    NoEcho: true
    Description: Keycloak admin password
  KeycloakWebClientId:
    Type: String
    Default: agent-platform-web-client
    Description: Keycloak web client ID
  DatastoreApiPort:
    Type: String
    Default: "3001"
    Description: Port for Datastore API
  ControlApiPort:
    Type: String
    Default: "3002"
    Description: Port for Control API
  SearchApiPort:
    Type: String
    Default: "3003"
    Description: Port for Search API
  WebServicePort:
    Type: String
    Default: "3000"
    Description: Port for Web Service
  GitHubUsername:
    Type: String
    Default: guanmasons
    Description: GitHub username
  GitHubRepo:
    Type: String
    Default: agent-platform
    Description: GitHub repository name
  AwsAccessKeyId:
    Type: String
    NoEcho: true
    Description: AWS Access Key ID
  AwsSecretAccessKey:
    Type: String
    NoEcho: true
    Description: AWS Secret Access Key

Outputs:
  EC2InstancePublicIP:
    Description: Public IP of the EC2 instance
    Value: !GetAtt EC2Instance.PublicIp
  EC2InstancePublicDNS:
    Description: Public DNS of the EC2 instance
    Value: !GetAtt EC2Instance.PublicDnsName  UserTableName:
    Description: Name of the User DynamoDB table
    Value: !Ref UserTable
  AgentTableName:
    Description: Name of the Agent DynamoDB table
    Value: !Ref AgentTable
  LoginTableName:
    Description: Name of the Login DynamoDB table
    Value: !Ref LoginTable
